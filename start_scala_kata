#!/usr/bin/env ruby

# Script for scaffolding kata in Scala language.

require 'fileutils'

if ARGV.length < 2
  abort "Usage: #{File.basename($0)} <kata_name> <class_name>"
end

def normalize_kata_name(kata_name)
  (kata_name =~ /(^kata)|(kata$)/i) ? kata_name : kata_name + "Kata"
end

def find_full_kata_name(kata_name)
  index = Dir.entries(".").
    select { |n| n.start_with?(kata_name) }.
    map { |n| n[kata_name.length..-1][/^\d+/] }.max.to_i + 1
  kata_name + index.to_s
end
def find_root_directory(full_kata_name, kata_type)
   full_kata_name + "_" + kata_type
end

kata_name = normalize_kata_name(ARGV[0])
class_name = ARGV[1]

full_kata_name = find_full_kata_name(kata_name)
project_directory = find_root_directory(full_kata_name, "scala")

# First - prepare project file structure

# Planned directory structure:
# - <KataName><index>_scala
#   - src
#     - main
#       - scala
#         - <class_filename>.scala
#     - test
#       - scala
#         - <class_filename>Spec.scala
#   build.sbt

class_filename = class_name
base_app_filename = File.join("src", "main", "scala", "#{class_filename}.scala")
base_test_filename = File.join("src", "test", "scala", "#{class_filename}Suite.scala")
app_filename = File.join(project_directory, base_app_filename)
spec_filename = File.join(project_directory, base_test_filename)

puts "Kata:       #{kata_name}"
puts "Full name:  #{full_kata_name}"
puts "Class:      #{class_name}"
puts "App file:   #{app_filename}"
puts "Test file:  #{spec_filename}"

def create_file(filename, content)
  dirname = File.dirname(filename)
  if (!Dir.exists?(dirname))
    puts "Creating directory \"#{dirname}\""
    FileUtils.mkpath(dirname)
  end
  puts "Creating file \"#{filename}\"..."
  File.open(filename, 'w+') { |f| f.write(content) }
end

create_file(File.join(project_directory, "build.sbt"), <<END_OF_TEMPLATE)
name := "#{full_kata_name}"

version := "1.0.0"

scalaVersion := "2.11.1"

scalacOptions ++= Seq("-deprecation")

libraryDependencies += "org.scalatest" %% "scalatest" % "2.1.7" % "test"

libraryDependencies += "junit" % "junit" % "4.10" % "test"
END_OF_TEMPLATE

create_file(File.join(project_directory, "project", "plugins.sbt"), <<END_OF_TEMPLATE)
addSbtPlugin("com.typesafe.sbteclipse" % "sbteclipse-plugin" % "2.5.0")
END_OF_TEMPLATE

create_file(app_filename, <<END_OF_TEMPLATE)
// Kata: #{full_kata_name}
// Created #{Time.now}

object #{class_name} {
  def something = 1
}
END_OF_TEMPLATE

create_file(spec_filename, <<END_OF_TEMPLATE)
// Kata: #{full_kata_name}
// Created #{Time.now}

import org.scalatest.FunSuite
import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner

/**
 * This class is a test suite for the methods in object #{class_name}. To run
 * the test suite, you can either:
 *  - run the "test" command in the SBT console
 *  - right-click the file in eclipse and chose "Run As" - "JUnit Test"
 */
@RunWith(classOf[JUnitRunner])
class #{class_name}Suite extends FunSuite {
  
  import #{class_name}._
  
  test("doing something") {
    assert(something === 2)
  }

}
END_OF_TEMPLATE

# Second - run tools
system("mate #{app_filename}")
system("mate #{spec_filename}")

Dir.chdir(project_directory)
system("sbt eclipse")
system("echo \"~ test\" | sbt")
